"all system-wide defaults are set in $vimruntime/debian.vim (usually just
"/usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
"you can find below.  if you wish to change any of those settings, you should
"do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
"everytime an upgrade of the vim packages is performed.  it is recommended to
"make changes after sourcing debian.vim since it alters the value of the
"'compatible' option.

" this line should not be removed as it ensures that various options are
" properly set to work with the vim-related packages available in debian.
runtime! debian.vim

" uncomment the next line to make vim more vi-compatible
" note: debian.vim sets 'nocompatible'.  setting 'compatible' changes numerous
" options, so any other options should be set after setting 'compatible'.
"set compatible

" vim5 and later versions support syntax highlighting. uncommenting the
" following enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" if using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" uncomment the following to have vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au bufreadpost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" uncomment the following to have vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" the following are commented out as they cause vim to behave a lot
" differently from regular vi. they are highly recommended though.
"set showcmd		" show (partial) command in status line.
"set showmatch		" show matching brackets.
"set ignorecase		" do case insensitive matching
"set smartcase		" do smart case matching
"set incsearch		" incremental search
"set autowrite		" automatically save before commands like :next and :make
"set hidden             " hide buffers when they are abandoned
"set mouse=a		" enable mouse usage (all modes)
autocmd FileType c,cpp,make set tabstop=4 | set expandtab
set shiftwidth=4
set hlsearch
set nonumber
"set autoindent
set smartcase
set nocp
set foldmethod=marker
"set foldcolumn=4
"set foldmethod=indent

set background=dark
"set background=light
"set filetype=c
let mapleader = ","
"map <silent> <leader>tl :TlistToggle<cr>

" source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif



""""""""""""""""""""""""""""""
" markbrowser setting
" """"""""""""""""""""""""""""""
 "nmap <silent> <leader>mk :MarksBrowser<cr>


""""""""""""""""""""""""""""""
" showmarks setting
""""""""""""""""""""""""""""""
" enable showmarks
let showmarks_enable = 1
" show which marks
let showmarks_include = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
" ignore help, quickfix, non-modifiable buffers
let showmarks_ignore_type = "hqm"
" hilight lower & upper marks
let showmarks_hlline_lower = 1
let showmarks_hlline_upper = 1 


let tlist_auto_open=1
let tlist_auto_update=1
filetype plugin on
let &termencoding=&encoding
set fileencodings=utf-8,gbk,ucs-bom,cp936 
"set tags=/home/arcsoft/Projects/LTE-Q/7th_workspace/DualCore/android/frameworks/base/tags
"set tags +=~/.vim/systags
"set tags =/home/lma/linux_else/tags
"hi Comment ctermfg =lightblue
colorscheme desert

function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
au BufEnter /* call LoadCscope()

function! Zoom ()
    "check if is the zoomed state (tabnumber > 1 && window == 1)
    if tabpagenr('$') > 1 && tabpagewinnr(tabpagenr(), '$') == 1
        let l:cur_winview = winsaveview()
        let l:cur_bufname = bufname('')
        tabclose

        "restore the view
        if l:cur_bufname == bufname('')
            call winrestview(cur_winview)
        endif
    else
        tab split
    endif
endfunction

nmap <leader>z :call Zoom()<CR>

"ctrlp
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
map <leader>r :CtrlPMRU<CR>

let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }

let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

nnoremap <Leader>f :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
"nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_extensions = ['funky']
let g:ctrlp_by_filename=1
let g:ctrlp_regexp=1

" Initialise list by a word under cursor
nnoremap <Leader>u :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
"noremap <silent><tab>m :tabnew<cr>
"noremap <silent><tab>e :tabclose<cr>
"noremap <silent><tab>n :tabn<cr>
"noremap <silent><tab>p :tabp<cr>
"noremap <silent><leader>t :tabnew<cr>
"noremap <silent><leader>g :tabclose<cr>
"noremap <silent><leader>1 :tabn 1<cr>
"noremap <silent><leader>2 :tabn 2<cr>
"noremap <silent><leader>3 :tabn 3<cr>
"noremap <silent><leader>4 :tabn 4<cr>
"noremap <silent><leader>5 :tabn 5<cr>
"noremap <silent><leader>6 :tabn 6<cr>
"noremap <silent><leader>7 :tabn 7<cr>
"noremap <silent><leader>8 :tabn 8<cr>
"noremap <silent><leader>9 :tabn 9<cr>
"noremap <silent><leader>0 :tabn 10<cr>
"noremap <silent><s-tab> :tabnext<CR>
"inoremap <silent><s-tab> <ESC>:tabnext<CR>

" Tab navigation
nnoremap tp :tabprevious<CR>
nnoremap tn :tabnext<CR>
nnoremap to :tabnew<CR>
nnoremap tc :tabclose<CR>
nnoremap t1 :tabn 1<cr>
nnoremap t2 :tabn 2<cr>
nnoremap t3 :tabn 3<cr>
"nnoremap gf <C-W>gf

" Move among windows
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l

" NERDTree toggle
nnoremap <silent> <leader>n :NERDTreeToggle<CR>
nnoremap <silent> <leader>t :TlistToggle<CR>

nnoremap <silent> <leader>q :q<CR>
nnoremap <silent> <leader>w :wqa<CR>

"noremap <silent><leader>t :set listchars=tab:>-,trail:-<cr>
"nnoremap <silent><leader>t :set listchars=tab:>-,trail:$,extends:#,nbsp:%<cr> :set list<cr>
"nnoremap <silent><leader>T :retab!<cr>
"nnoremap <silent><leader>u :%s/\r\+$//e<cr>
"nnoremap <silent><leader>U :%s/\s*$//g<cr>


"nnoremap <leader>I :IndentLinesToggle<CR>
nnoremap <leader>i :LeadingSpaceToggle<CR>
let g:indentLine_enabled = 0

" For vundle
set nocompatible
"set rtp+=~/.vim/bundle/vundle/
"call vundle#rc()
"Bundle 'gmarik/vundle'
" vim-scripts repos
"Bundle 'Valloric/YouCompleteMe'
"Bundle 'rdnetto/YCM-Generator'
"Bundle 'bling/vim-airline'
"Bundle 'dyng/ctrlsf.vim'

"let g:ycm_autoclose_preview_window_after_completion=1
""let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
"let g:ycm_collect_identifiers_from_tag_files=0
"let g:ycm_min_num_of_chars_for_completion=2
"let g:ycm_confirm_extra_conf=0

""let g:ycm_auto_trigger=0

"let g:ycm_enable_diagnostic_signs=0
"let g:ycm_enable_diagnostic_highlighting=0
"let g:ycm_echo_current_diagnostic=0
"let g:ycm_open_loclist_on_ycm_diags=0
"let g:ycm_autoclose_preview_window_after_insertion=0

"let g:ycm_show_diagnostics_ui=0

"let g:ycm_seed_identifiers_with_syntax=0
"let g:ycm_echo_current_diagnostic=0
"let g:syntastic_echo_current_error=1
""nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
"nnoremap <leader>g :YcmCompleter GoToDefinition<CR>
"nnoremap <leader>d :YcmCompleter GoToDeclaration<CR>
"nnoremap <leader>F :YcmCompleter GoToInclude<CR>
"nnoremap <leader>D :YcmCompleter GoTo<CR>
""nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
""nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
""
"let g:ycm_filetype_blacklist = {
       "\ 'tagbar' : 1,
       "\ 'qf' : 1,
       "\ 'notes' : 1,
       "\ 'markdown' : 1,
       "\ 'unite' : 1,
       "\ 'text' : 1,
       "\ 'vimwiki' : 1,
       "\ 'pandoc' : 1,
       "\ 'infolog' : 1,
       "\ 'mail' : 1,
       "\ 'help' : 1,
       "\}
""\ 'make' : 1
""
let g:autocscope_menus=1

" easy motion
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
"map <leader><leader>h <Plug>(easymotion-linebackward)
"map <leader><leader>l <Plug>(easymotion-lineforward)
"map <leader><leader>s <Plug>(easymotion-s2)
map <leader>. <Plug>(easymotion-s)
"map <leader><leader>t <Plug>(easymotion-t2)
map <leader><leader>. <Plug>(easymotion-repeat)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
"map  n <Plug>(easymotion-next)
"map  N <Plug>(easymotion-prev)

"a.vim
nnoremap <leader>a :A<CR>
nnoremap <leader>o :only<CR>

"ctrlsf.vim
"error happens
"let g:ctrlsf_default_root = 'project'
"nnoremap <leader>o :execute 'CtrlSF ' . expand('<cword>')<Cr>
"nnoremap <leader>t :CtrlSFToggle<CR>
nnoremap <Space> <C-f>

"map <F2> :call ToggleSketch()<CR>
"inoremap jj <ESC>

"nnoremap <Leader>e :call TracyoneGotoDef("")<cr>
"nnoremap <C-\>g :call TracyoneGotoDef("sp")<cr>

"function! TracyoneGotoDef(open_type)
    "let l:ycm_ret=s:YcmGotoDef(a:open_type)
    "if l:ycm_ret < 0
        "try
            "execute "cs find g ".expand("<cword>")
        "catch /^Vim\%((\a\+)\)\=:E/ 
            "call s:EchoWarning("cscope query failed")
            "if a:open_type != "" | wincmd q | endif
            "return -1
        "endtry
    "else
        "return 0
    "endif
    "return 0
"endfunction

"func! s:YcmGotoDef(open_type)
    "let l:cur_word=expand("<cword>")."\s*\(.*[^;]$"
    ":redir => l:msg
    "execute a:open_type
    "silent! execute ":YcmCompleter GoToDefinition"
    ":redir END
    "let l:rs=split(l:msg,'\r\n\|\n')
    "if get(l:rs,-1,3) !=3  && l:rs[-1] =~ 'Runtime.*'
        ":redir => l:msg
        "silent! execute ":YcmCompleter GoToDeclaration"
        ":redir END
        "let l:rs=split(l:msg,'\r\n\|\n')
        "if get(l:rs,-1,3) != 3 && l:rs[-1] !~ 'Runtime.*'
            "execute ":silent! A"
            "if search(l:cur_word) == 0
                "execute ":silent! A"
                "return -2
            "endif
            "return 3
        "elseif get(l:rs,-1,3) == 3  "not exist no error
            "return 0
        "else
            "return -3 
        "endif

    "else
        "return 1
    "endif
"endfunc


autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr>
"set autochdir
