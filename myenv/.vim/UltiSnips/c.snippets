snippet main
int main(int argc, char* argv[])
{
    ${0}

    return 0;
}
endsnippet

snippet cpp
#ifdef __cplusplus
extern "C" {
#endif

${0}

#ifdef __cplusplus
} /* extern "C" */
#endif
endsnippet

snippet def
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet if
if(${1:true})
{
    ${2:${VISUAL}}
}
else
{
    ${0}
}
endsnippet

snippet for
for(${1})
{
    ${2}
}
endsnippet

snippet .
{
    ${1}
}
endsnippet


snippet inc
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

endsnippet

snippet filer
FILE* ${1:fp} = fopen(${2}, "r");
fread(${3}, ${4}, 1, $1);

fclose($1);
endsnippet

snippet filew
FILE* ${1:fp} = fopen(${2}, "w");
fwrite(${3}, ${4}, 1, $1);

fclose($1);
endsnippet

snippet malloc
char* ${1:buff} = malloc(${2});
endsnippet


snippet filesize

#include <sys/stat.h>
unsigned long get_file_size(const char *path)
{
    unsigned long filesize = -1;
    struct stat statbuff;
    if(stat(path, &statbuff) < 0)
    {
    	return filesize;
    }
    else
    {
    	filesize = statbuff.st_size;
    }
    return filesize;
}

endsnippet

snippet scanf
FILE* fp = fopen("${1:data.txt}", "r");
#define MAX_LINE 100
char str[MAX_LINE];
int linenum = 0;
while (fgets(str, MAX_LINE, fp) != NULL)
    linenum++;

fseek(fp, 0, SEEK_SET);

int value[linenum];
for(int i = 0; i < linenum; i++)
{
    fscanf(fp, "%d\n", &value[i]);
}

fclose(fp);

endsnippet
